const baseuri = "https://api.spotify.com/v1/me";
import { HttpService } from "@rbxts/services";
/*
    Fetches current track with token
    @param token The token you get from the Spotify Console
*/
export function fetchcurrenttrack(token: string) {
	const response = request({
		Method: "GET",
		Url: baseuri + "/player/currently-playing",
		Headers: {
			Accept: "application/json",
			ContentType: "application/json",
			Authorization: "Bearer " + token,
		},
	}).Body;

	const decodedresponse = HttpService.JSONDecode(response);

	return {
		artist: decodedresponse["artist"],
	};
}
/*
    Changes current track to the next track
    @param token The token you get from the Spotify Console
*/
export function spotifynexttrack(token: string) {
	request({
		Method: "POST",
		Url: baseuri + "/player/next",
		Headers: {
			Accept: "application/json",
			ContentType: "application/json",
			Authorization: "Bearer " + token,
		},
	});
}
/*
    Changes current track to the previous track
    @param token The token you get from the Spotify Console
*/
export function spotifyprevtrack(token: string) {
	request({
		Method: "POST",
		Url: baseuri + "/player/previous",
		Headers: {
			Accept: "application/json",
			ContentType: "application/json",
			Authorization: "Bearer " + token,
		},
	});
}
/*
    Changes current track state to paused
    @param token The token you get from the Spotify Console
*/
export function spotifypausetrack(token: string) {
	request({
		Method: "PUT",
		Url: baseuri + "/player/pause",
		Headers: {
			Accept: "application/json",
			ContentType: "application/json",
			Authorization: "Bearer " + token,
		},
	});
}
/*
    Changes current track state to playing
    @param token The token you get from the Spotify Console
*/
export function spotifyplaytrack(token: string) {
	request({
		Method: "PUT",
		Url: baseuri + "/player/play",
		Headers: {
			Accept: "application/json",
			ContentType: "application/json",
			Authorization: "Bearer " + token,
		},
	});
}
/*
    Changes current track volume to volume
    @param token The token you get from the Spotify Console
    @param volume The volume you want to replace from the old volume
*/
export function spotifyvolume(token: string, volume: number) {
	request({
		Method: "PUT",
		Url: baseuri + "/player/volume?volume_percent=" + tostring(volume),
		Headers: {
			Accept: "application/json",
			ContentType: "application/json",
			Authorization: "Bearer " + token,
		},
	});
}
